// schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String              @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?             
  nickname              String?             
  username              String?
  email                 String?             @unique
  emailVerified         DateTime?
  password              String?
  role                  UserRole            @default(USER)
  isTwoFactorEnabled    Boolean             @default(false)
  onboarded            Boolean             @default(false)
  description          String?
  bio                  String?

  // attachment
  image                 String?             
  cover                 String?
  cv                    String?             
  additionalFile        String?
  
  // Contact Information
  phone                String?
  whatsapp             String?
  twitter              String?
  facebook             String?
  linkedin             String?
  telegram             String?
  instagram            String?
  tiktok               String?
  
  // Personal Information
  birthDate            DateTime?
  birthCountry         String?
  birthState           String?
  birthLocality        String?
  birthAdminUnit       String?
  birthNeighborhood    String?

  // Current Location
  currentCountry       String?
  currentState         String?
  currentLocality      String?
  currentAdminUnit     String?
  currentNeighborhood  String?

  // Original Location
  originalCountry      String?
  originalState        String?
  originalLocality     String?
  originalAdminUnit    String?
  originalNeighborhood String?

  nationalityId        String?             
  maritalStatus        String?             
  gender               String?             
  religion             String?             
  
  // Education & Work
  educationLevel       String?
  institution          String?
  yearOfCompletion     Int?
  currentOccupation    String?             
  employmentSector     String?             
  workplaceAddress     String?             
  
  // Student Details
  studentInstitution   String?
  studentFaculty       String?
  studentYear          Int?

  // Activities & Skills
  politicalParty       String?
  politicalMembership  String?
  socialActivityType   String?
  socialDescription    String?
  skills               String[]            
  languageSkills       String[]            
  
  // Emergency Contacts
  emergencyName1       String?
  emergencyRelation1   String?
  emergencyPhone1      String?
  emergencyName2       String?
  emergencyRelation2   String?
  emergencyPhone2      String?

  // Other
  referralSource       String?
  acquaintanceName     String?
  donationAmount       Float?
  donationDate         DateTime?
  oathAcknowledged     Boolean             @default(false)

  // Social Features
  posts                Post[]
  comments             Comment[]
  likes               Like[]
  followers           Follower[]           @relation("UserFollowers")
  followings          Follower[]           @relation("UserFollowings")
  followRequestsSent   FollowRequest[]     @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[]   @relation("FollowRequestsReceived")
  blocks              Block[]              @relation("BlocksSent")
  blockedBy           Block[]              @relation("BlocksReceived")
  
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}




model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  img       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @db.ObjectId
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @db.ObjectId
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String    @db.ObjectId
  likes     Like[]
}

model Like {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String    @db.ObjectId
  post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String?   @db.ObjectId
  comment    Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId  String?   @db.ObjectId
}

model Follower {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  follower    User      @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String    @db.ObjectId
  following   User      @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String    @db.ObjectId
}

model FollowRequest {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  sender      User      @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String    @db.ObjectId
  receiver    User      @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  String    @db.ObjectId

  @@unique([senderId, receiverId])
}

model Block {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  blocker    User      @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId  String    @db.ObjectId
  blocked    User      @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId  String    @db.ObjectId

  @@unique([blockerId, blockedId])
}



  